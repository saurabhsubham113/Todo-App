{"version":3,"sources":["Component/Todo/Todo.js","Component/NewTodoForm/NewTodoForm.js","Component/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","toggleEditForm","event","setState","isEditing","state","handleClick","remove","id","handleChange","target","name","value","handleUpdate","preventDefault","update","task","handleToggle","toggleTodo","this","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","create","uuid","htmlFor","TodoList","createTask","newTodo","todos","removetask","filter","todo","updateTask","updateTodo","updateTasks","map","toggleCompletion","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.024007ee.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todo.css'\r\n\r\n//responsible for rendering task\r\nexport default class Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        }\r\n    }\r\n\r\n    toggleEditForm = (event) => {\r\n        this.setState({ isEditing: !this.state.isEditing })\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.remove(this.props.id)\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleUpdate = (event) => {\r\n        event.preventDefault()\r\n        //take new task data and pass it upto parent\r\n        this.props.update(this.props.id, this.state.task)\r\n        this.setState({ isEditing: false })\r\n    }\r\n\r\n    handleToggle = () => {\r\n        this.props.toggleTodo(this.props.id)\r\n    }\r\n    render() {\r\n        let result;\r\n        if (this.state.isEditing) {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"task\"\r\n                            onChange={this.handleChange}\r\n                            value={this.state.task}\r\n                        />\r\n                        <button>save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <li className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}\r\n                        onClick={this.handleToggle}>\r\n                        {this.props.task}\r\n                    </li>\r\n                    <div className=\"Todo-buttons\">\r\n                        <button onClick={this.toggleEditForm}>\r\n                        <i className='fas fa-pen' />\r\n                        </button>\r\n                        <button onClick={this.handleClick}>\r\n                        <i className='fas fa-trash' />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            result\r\n        )\r\n    }\r\n};\r\n\r\n","import React, { Component } from 'react'\r\nimport './NewTodForm.css'\r\nimport uuid from 'uuid/dist/v4'\r\n\r\nexport default class NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task : \"\"\r\n        }\r\n    }\r\n    \r\n    //getting the value from the input and setting the state\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    //sending the data up to the parent using props and creating new task\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.props.create({...this.state , id : uuid() , completed:false})\r\n        this.setState({ task : \"\"})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Todo</label>\r\n                <input type=\"text\" \r\n                id=\"task\" \r\n                name=\"task\" \r\n                value={this.state.task} \r\n                onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport Todo from '../Todo/Todo';\r\nimport './TodoList.css'\r\nimport NewTodoForm from '../NewTodoForm/NewTodoForm';\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos : []\r\n        }\r\n    }\r\n\r\n    //creating new todo and getting the value from the child of todoform\r\n    //and adding it into the state\r\n    createTask = (newTodo) => {\r\n        this.setState({\r\n            todos : [...this.state.todos , newTodo]\r\n        })\r\n    }\r\n\r\n    removetask = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    updateTask = (id, updateTodo) => {\r\n        const updateTasks = this.state.todos.map(todo => {\r\n            //check whether the id of the task we are looking for and update the task\r\n            if(todo.id === id){\r\n                return {...todo,task:updateTodo}\r\n            }\r\n            return todo\r\n        })\r\n        this.setState({todos: updateTasks})\r\n    }\r\n\r\n    toggleCompletion = (id) => {\r\n        const updateTasks = this.state.todos.map(todo => {\r\n            //check whether the id of the task we are looking for and update the task\r\n            if(todo.id === id){\r\n                return {...todo,completed : !todo.completed}\r\n            }\r\n            return todo\r\n        })\r\n        this.setState({todos: updateTasks})\r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map(todo => (\r\n            //passing the task as props and rendering it using todo\r\n            <Todo \r\n            key={todo.id} \r\n            task={todo.task} \r\n            id={todo.id}\r\n            completed={todo.completed}\r\n            remove={this.removetask}\r\n            update={this.updateTask}\r\n            toggleTodo = {this.toggleCompletion}\r\n            /> \r\n        ))\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>\r\n                    Todo List \r\n                    <span>A simple react TodoList App</span>\r\n                </h1>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n                <NewTodoForm create={this.createTask}/>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n","import React from 'react';\nimport TodoList from './Component/TodoList/TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}